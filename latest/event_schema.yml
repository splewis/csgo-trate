---
openapi: "3.1.0"
info:
  title: "Get5 Event Documentation"
  version: ""
  description: |
    This is the documentation of all JSON events and native plugin forwards for Get5. All HTTP events get
    sent as POST requests to the root of the URL you provided for
    [`get5_remote_log_url`](configuration#get5_remote_log_url) in your Get5 configuration. You should inspect the value
    of the `event` property to determine the type of event. You cannot select which events to receive, but you can
    instead discard the ones you don't need.
    
    You are expected to return a 200-range HTTP code to all request, or Get5 will consider them failed. The HTTP timeout
    is 15 seconds and there are no automatic retries.
webhooks:
  "Get_OnEvent":
    post:
      tags:
        - All Events
      summary: Get_OnEvent
      description: |
        Called when **any event** is fired. This forward takes two parameters (while all others take only one); the
        event object itself *and* a string representing the encoded JSON object. If you use this forward, you should
        fetch the event name and switch on it, casting the object to its correct subclass using
        `view_as<TheEventSubclass>(event)`.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Get5Event"
  "Get5_OnGameStateChanged":
    post:
      tags:
        - Series Flow
      summary: Get5_OnGameStateChanged
      description: |
        Fired when the game state changes. You can listen for this event and mark a server as available when it sends
        `none` as its game state; this is always sent *after* both the series *and* the GOTV broadcast have ended.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5GameStateChangedEvent
              allOf:
                - $ref: "#/components/schemas/Get5Event"
                - type: object
                  properties:
                    event:
                      enum:
                        - game_state_changed
                    new_state:
                      description: The state the game has transitioned to. `NewState`
                        in SourceMod.
                      allOf:
                        - "$ref": "#/components/schemas/Get5State"
                    old_state:
                      description: The state the game has transitioned from. `OldState`
                        in SourceMod.
                      allOf:
                        - "$ref": "#/components/schemas/Get5State"
  "Get5_OnPlayerConnected":
    post:
      tags:
        - Client Actions
      summary: Get5_OnPlayerConnected
      description: |
        Fired when a player connects to the server.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5PlayerConnectedEvent
              allOf:
                - $ref: "#/components/schemas/Get5PlayerDisconnectedEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - player_connect
                    ip_address:
                      type: string
                      example: '34.132.182.66'
                      description: The IP address of the connecting client. `GetIPAddress()` and `SetIPAddress()` in SourceMod.
  "Get5_OnPlayerDisconnected":
    post:
      tags:
        - Client Actions
      summary: Get5_OnPlayerDisconnected
      description: |
        Fired when a player disconnects from the server.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5PlayerDisconnectedEvent
              allOf:
                - $ref: "#/components/schemas/Get5PlayerDisconnectedEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - player_disconnect
  "Get5_OnPreLoadMatchConfig":
    post:
      tags:
        - Series Flow
      summary: Get5_OnPreLoadMatchConfig
      description: |
        Fired when the server attempts to load a match config.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5PreloadMatchConfigEvent
              allOf:
                - $ref: "#/components/schemas/Get5Event"
                - type: object
                  properties:
                    event:
                      enum:
                        - preload_match_config
                    filename:
                      type: string
                      description: The file the server attempted to load. `GetFileName()`
                        and `SetFileName()` in SourceMod.
  "Get5_OnLoadMatchConfigFailed":
    post:
      tags:
        - Series Flow
      summary: Get5_OnLoadMatchConfigFailed
      description: |
        Fired when a match config fails to load.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5LoadMatchConfigFailedEvent
              allOf:
                - $ref: "#/components/schemas/Get5Event"
                - type: object
                  properties:
                    event:
                      enum:
                        - match_config_load_fail
                    reason:
                      type: string
                      description: The error description for why the config load failed.
                        `GetReason()` and `SetReason()` in SourceMod.
                      example: You done goofed.
  "Get5_OnSeriesInit":
    post:
      tags:
        - Series Flow
      summary: Get5_OnSeriesInit
      description: |
        Fired when a series is started after loading a match config.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5SeriesStartedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MatchEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - series_start
                    num_maps:
                      type: integer
                      minimum: 1
                      description: The number of maps in the series, i.e. 3 for a Bo3. `NumberOfMaps` in SourceMod.
                    team1:
                      "$ref": "#/components/schemas/Get5TeamWrapper"
                    team2:
                      "$ref": "#/components/schemas/Get5TeamWrapper"
  "Get5_OnMatchPaused":
    post:
      tags:
        - Map Flow
      summary: Get5_OnMatchPaused
      description: |
        Fired when a request for a match pause is granted. If you need to know when a pause begins, see
        `Get5_OnPauseBegan`.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5MatchPausedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MatchPauseEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - game_paused
  "Get5_OnMatchUnpaused":
    post:
      tags:
        - Map Flow
      summary: Get5_OnMatchUnpaused
      description: |
        Fired when the match is unpaused.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5MatchUnpausedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MatchPauseEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - game_unpaused
  "Get5_OnPauseBegan":
    post:
      tags:
        - Map Flow
      summary: Get5_OnPauseBegan
      description: |
        Fired when a pause begins. This forward is only fired during freeze-time. If a pause is called during
        freezetime, this and `Get5_OnMatchPaused` are called at the same time.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5MatchPauseBeganEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MatchPauseEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - pause_began
  "Get5_OnMapResult":
    post:
      tags:
        - Series Flow
      summary: Get5_OnMapResult
      description: |
        Fired when the map ends.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5MapResultEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MapEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - map_result
                    team1:
                      $ref: "#/components/schemas/Get5StatsTeam"
                    team2:
                      $ref: "#/components/schemas/Get5StatsTeam"
                    winner:
                      $ref: "#/components/schemas/Get5Winner"
  "Get5_OnSeriesResult":
    post:
      tags:
        - Series Flow
      summary: Get5_OnSeriesResult
      description: |
        Fired when a series ends.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5SeriesResultEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MatchEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - series_end
                    team1_series_score:
                      type: integer
                      minimum: 0
                      example: 2
                      description: The map/series score of team1. `Team1SeriesScore` in
                        SourceMod.
                    team2_series_score:
                      type: integer
                      minimum: 0
                      description: The map/series score of team2. `Team2SeriesScore` in
                        SourceMod.
                    winner:
                      $ref: "#/components/schemas/Get5Winner"
                    time_until_restore:
                      type: integer
                      minimum: 0
                      example: 45
                      description: |
                        The number of seconds until Get5 restores any changed ConVars and resets its game state to
                        `none` after the series has ended.
  "Get5_OnKnifeRoundStarted":
    post:
      tags:
        - Map Flow
      summary: Get5_OnKnifeRoundStarted
      description: |
        Fired when the knife round starts.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5KnifeRoundStartedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MapEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - knife_start
  "Get5_OnKnifeRoundWon":
    post:
      tags:
        - Map Flow
      summary: Get5_OnKnifeRoundWon
      description: |
        Fired when the knife round is over and the teams have elected to swap or stay. `side` represents the chosen side
        of the winning team, not the side that won the knife round.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5KnifeRoundWonEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MapTeamEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - knife_won
                    side:
                      $ref: "#/components/schemas/Get5Side"
                    swapped:
                      type: boolean
                      description: Indicates if the winning team elected to swap sides
                        or not. `Swapped` on SourceMod.
  "Get5_OnSidePicked":
    post:
      tags:
        - Series Flow
      summary: Get5_OnSidePicked
      description: |
        Fired when a side is picked by a team.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5SidePickedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MapSelectionEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - side_picked
                    side:
                      $ref: "#/components/schemas/Get5Side"
                    map_number:
                      type: integer
                      minimum: 0
                      description: The map number the team chose a side for. `MapNumber`
                        in SourceMod.
  "Get5_OnMapPicked":
    post:
      tags:
        - Series Flow
      summary: Get5_OnMapPicked
      description: |
        Fired when a team picks a map.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5MapPickedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MapSelectionEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - map_picked
                    map_number:
                      type: integer
                      minimum: 0
                      description: The map number of the chosen map.
  "Get5_OnMapVetoed":
    post:
      tags:
        - Series Flow
      summary: Get5_OnMapVetoed
      description: |
        Fired when a team vetos a map.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5MapPickedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MapSelectionEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - map_vetoed
  "Get5_OnTeamReadyStatusChanged":
    post:
      tags:
        - Map Flow
      summary: Get5_OnTeamReadyStatusChanged
      description: |
        Fired when a team's ready status changes.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5TeamReadyStatusChangedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MatchTeamEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - team_ready_status_changed
                    ready:
                      type: boolean
                      description: Indicates if the team was marked as ready or not (unready).
                    game_state:
                      description: |
                        The game state the ready change was announced during. `GameState` in SourceMod and represented as
                        an integer enum.
                      allOf:
                        - "$ref": "#/components/schemas/Get5State"
  "Get5_OnGoingLive":
    post:
      tags:
        - Map Flow
      summary: Get5_OnGoingLive
      description: |
        Fired when a map is going live.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5GoingLiveEvent
              allOf:
                - "$ref": "#/components/schemas/Get5MapEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - going_live
  "Get5_OnRoundStart":
    post:
      tags:
        - Live
      summary: Get5_OnRoundStart
      description: |
        Fired when a round starts (when freezetime begins).
      requestBody:
        content:
          application/json:
            schema:
              title: Get5RoundStartedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5RoundEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - round_start
  "Get5_OnRoundEnd":
    post:
      tags:
        - Live
      summary: Get5_OnRoundEnd
      description: |
        Fired when a round ends - when the result is in; not when the round stops. Game activity can occur after this.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5RoundEndedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5TimedRoundEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - round_end
                    reason:
                      type: integer
                      minimum: 0
                      description: The reason for the round ending. `Reason` in SourceMod.
                        See https://sourcemod.dev/#/cstrike/enumeration.CSRoundEndReason.
                    winner:
                      $ref: "#/components/schemas/Get5Winner"
                    team1:
                      title: Get5StatsTeam
                      description: The stats for team 1.
                      allOf:
                        - $ref: "#/components/schemas/Get5StatsTeam"
                    team2:
                      title: Get5StatsTeam
                      description: The stats for team 2.
                      allOf:
                        - $ref: "#/components/schemas/Get5StatsTeam"
  "Get5_OnRoundStatsUpdated":
    post:
      tags:
        - Live
      summary: Get5_OnRoundStatsUpdated
      description: |
        Fired after the stats update on round end.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5RoundStatsUpdatedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5RoundEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - stats_updated
  "Get5_OnBackupRestore":
    post:
      tags:
        - Series Flow
      summary: Get5_OnBackupRestore
      description: |
        Fired when a round is restored from a backup. Note that the map and round numbers indicate the round being
        restored **to**, not the round the backup was requested during.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5BackupRestoredEvent
              allOf:
                - "$ref": "#/components/schemas/Get5RoundEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - backup_loaded
                    filename:
                      type: string
                      description: The name of the file that was used to restore the game
                        state from. `GetFileName()` and `SetFileName()` in SourceMod.
  "Get5_OnDemoFinished":
    post:
      tags:
        - Series Flow
      summary: Get5_OnDemoFinished
      description: |
        Fired when the GOTV recording has ended. This event does not fire if no demo was recorded.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5DemoFinishedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5DemoFileEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - demo_finished
  "Get5_OnDemoUploadEnded":
    post:
      tags:
        - Series Flow
      summary: Get5_OnDemoUploadEnded
      description: |
        Fired when the request to upload a demo ends, regardless if it succeeds or fails. If you upload demos, you
        should not shut down a server until this event has fired.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5DemoUploadEndedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5DemoFileEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - demo_upload_ended
                    success:
                      type: boolean
                      description: Whether the upload was successful. `Success` in SourceMod.
  "Get5_OnPlayerBecameMVP":
    post:
      tags:
        - Live
      summary: Get5_OnPlayerBecameMVP
      description: |
        Fired when a player is elected the MVP of the round.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5RoundMVPEvent
              allOf:
                - "$ref": "#/components/schemas/Get5PlayerRoundEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - round_mvp
                    reason:
                      type: integer
                      minimum: 0
                      description: The reason for the MVP assignment. `Reason` in SourceMod.
  "Get5_OnGrenadeThrown":
    post:
      tags:
        - Live
      summary: Get5_OnGrenadeThrown
      description: |
        Fired whenever a grenade is thrown by a player. The `weapon` property reflects the grenade used.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5GrenadeThrownEvent
              allOf:
                - "$ref": "#/components/schemas/Get5PlayerWeaponEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - grenade_thrown
  "Get5_OnPlayerDeath":
    post:
      tags:
        - Live
      summary: Get5_OnPlayerDeath
      description: |
        Fired when a player dies.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5PlayerDeathEvent
              allOf:
                - "$ref": "#/components/schemas/Get5PlayerWeaponEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - player_death
                    bomb:
                      type: boolean
                      description: Indicates if the player died from the bomb explosion. `Bomb` in SourceMod.
                    headshot:
                      type: boolean
                      description: Indicates if the player died from a headshot. `Headshot`
                        in SourceMod.
                    thru_smoke:
                      type: boolean
                      description: Indicates if the player was killed through smoke. `ThruSmoke`
                        in SourceMod.
                    penetrated:
                      type: boolean
                      description: Indicates if the player was killed through an object
                        (another player or walls). `Penetrated` in SourceMod.
                    attacker_blind:
                      type: boolean
                      description: Indicates if the attacker was blind while the player
                        died. `AttackerBlind` in SourceMod.
                    no_scope:
                      type: boolean
                      description: Indicates if the attacker killed the player with a
                        rifle without scoping. `NoScope` in SourceMod.
                    suicide:
                      type: boolean
                      description: Indicates if the player died from suicide, such as
                        falling or dying from their own grenade. C4 bomb kills do not
                        count as suicide. `Suicide` in SourceMod.
                    friendly_fire:
                      type: boolean
                      description: Indicates if the player died from friendly fire. `FriendlyFire`
                        in SourceMod.
                    attacker:
                      allOf:
                        - type: object
                          nullable: true
                          title: Get5Player
                        - "$ref": "#/components/schemas/Get5Player"
                    assist:
                      "$ref": "#/components/schemas/Get5AssisterObject"
  "Get5_OnPlayerSay":
    post:
      tags:
        - Client Actions
      summary: Get5_OnPlayerSay
      description: |
        Fired when a player types in chat.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5PlayerSayEvent
              allOf:
                - "$ref": "#/components/schemas/Get5PlayerTimedRoundEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - player_say
                    command:
                      type: string
                      enum:
                        - say
                        - say_team
                      example: say
                      description: The command the player sent. `GetCommand()` and `SetCommand()` in SourceMod.
                    message:
                      type: string
                      minLength: 1
                      example: gg have fun
                      description: |
                        The arguments passed to the command; the message written. `GetMessage()` and `SetMessage()` in
                        SourceMod.
  "Get5_OnHEGrenadeDetonated":
    post:
      tags:
        - Live
      summary: Get5_OnHEGrenadeDetonated
      description: |
        Fired when an HE grenade detonates. `player` describes who threw the HE and `victims` who were affected.
        `weapon` is always an HE grenade.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5HEDetonatedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5VictimWithDamageGrenadeEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - hegrenade_detonated
  "Get5_OnMolotovDetonated":
    post:
      tags:
        - Live
      summary: Get5_OnMolotovDetonated
      description: |
        Fired when a molotov grenade expires. `player` describes
        who threw the molotov and `victims` who were affected. `weapon` is
        always a molotov grenade. Note that `round_time` reflects the time
        at which the grenade detonated (started burning).
      requestBody:
        content:
          application/json:
            schema:
              title: Get5MolotovDetonatedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5VictimWithDamageGrenadeEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - molotov_detonated
  "Get5_OnFlashbangDetonated":
    post:
      tags:
        - Live
      summary: Get5_OnFlashbangDetonated
      description: |
        Fired when a flash bang grenade detonates. `player` describes
        who threw the flash bang and `victims` who were affected. `weapon`
        is always a flash bang grenade.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5FlashbangDetonatedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5VictimGrenadeEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - flashbang_detonated
  "Get5_OnSmokeGrenadeDetonated":
    post:
      tags:
        - Live
      summary: Get5_OnSmokeGrenadeDetonated
      description: |
        Fired when an smoke grenade expires. `player` describes
        who threw the grenade. `weapon` is always a smoke grenade.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5SmokeDetonatedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5PlayerWeaponEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - smokegrenade_detonated
                    extinguished_molotov:
                      type: boolean
                      description: Indicates if the smoke distinguished an active molotov/firebomb.
                        `ExtinguishedMolotov` in SourceMod.
  "Get5_OnDecoyStarted":
    post:
      tags:
        - Live
      summary: Get5_OnDecoyStarted
      description: |
        Fired when a decoy starts making noise. `player` describes
        who threw the grenade. `weapon` is always a decoy grenade.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5DecoyStartedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5PlayerWeaponEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - decoygrenade_started
  "Get5_OnBombPlanted":
    post:
      tags:
        - Live
      summary: Get5_OnBombPlanted
      description: |
        Fired when the bomb is planted. `player` describes who planted the bomb.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5BombPlantedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5PlayerBombEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - bomb_planted
  "Get5_OnBombDefused":
    post:
      tags:
        - Live
      summary: Get5_OnBombDefused
      description: |
        Fired when the bomb is defused. `player` describes who defused the bomb.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5BombDefusedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5PlayerBombEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - bomb_defused
                    bomb_time_remaining:
                      type: number
                      minimum: 0
                      example: 12438
                      description: Indicates how many milliseconds remained on the bomb
                        timer when it was defused.
  "Get5_OnBombExploded":
    post:
      tags:
        - Live
      summary: Get5_OnBombExploded
      description: |
        Fired when the bomb explodes.
      requestBody:
        content:
          application/json:
            schema:
              title: Get5BombExplodedEvent
              allOf:
                - "$ref": "#/components/schemas/Get5BombEvent"
                - type: object
                  properties:
                    event:
                      enum:
                        - bomb_exploded
components:
  schemas:
    Get5State:
      type: string
      enum:
        - "none"
        - "pre_veto"
        - "veto"
        - "warmup"
        - "knife"
        - "waiting_for_knife_decision"
        - "going_live"
        - "live"
        - "post_game"
      description: |
        Represents the state of a Get5 match.
    Get5Event:
      type: object
      properties:
        event:
          type: string
          description: The name of the event `GetEvent()` and `SetEvent()` in SourceMod.
    Get5MatchEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5Event"
        - type: object
          properties:
            matchid:
              type: string
              description: The ID of the match. `GetMatchId()` and `SetMatchId()` in SourceMod.
              example: '14272'
    Get5MatchTeamEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5MatchEvent"
        - type: object
          properties:
            team:
              $ref: "#/components/schemas/Get5Team"
    Get5MapEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5MatchEvent"
        - type: object
          properties:
            map_number:
              type: integer
              minimum: 0
              example: 0
              description: The map number in the series, starting at 0. `MapNumber` in
                SourceMod.
    Get5DemoFileEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5MapEvent"
        - type: object
          properties:
            filename:
              type: string
              example: "1324_map_0_de_nuke.dem"
              description: |
                The name of the file containing the GOTV recording of the map. The format is determined by the
                `get5_demo_name_format` parameter.
    Get5MapSelectionEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5MatchTeamEvent"
        - type: object
          properties:
            map_name:
              type: string
              example: de_nuke
              description: The name of the map related to the event (map picked/banned
                etc.). `GetMapName()` and `SetMapName()` in SourceMod.
    Get5MapTeamEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5MapEvent"
        - type: object
          properties:
            team:
              $ref: "#/components/schemas/Get5Team"
    Get5RoundEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5MapEvent"
        - type: object
          properties:
            round_number:
              type: integer
              minimum: 0
              example: 13
              description: The round number of the map, starting at 0. `RoundNumber` in
                SourceMod.
    Get5PlayerRoundEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5RoundEvent"
        - type: object
          properties:
            player:
              "$ref": "#/components/schemas/Get5Player"
    Get5TimedRoundEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5RoundEvent"
        - type: object
          properties:
            round_time:
              type: integer
              description: The number of milliseconds into the round the event occurred.
                `RoundTime` in SourceMod.
              minimum: 0
              example: 51434
    Get5BombEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5TimedRoundEvent"
        - type: object
          properties:
            site:
              $ref: "#/components/schemas/Get5Site"
    Get5PlayerBombEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5PlayerTimedRoundEvent"
        - type: object
          properties:
            site:
              $ref: "#/components/schemas/Get5Site"
    Get5PlayerTimedRoundEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5TimedRoundEvent"
        - type: object
          properties:
            player:
              "$ref": "#/components/schemas/Get5Player"
    Get5PlayerWeaponEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5PlayerTimedRoundEvent"
        - type: object
          properties:
            weapon:
              "$ref": "#/components/schemas/Get5Weapon"
    Get5Winner:
      type: object
      description: Describes a winning team (their side and team number). `Winner` in SourceMod.
      properties:
        side:
          $ref: "#/components/schemas/Get5Side"
        team:
          $ref: "#/components/schemas/Get5Team"
    Get5Team:
      type: string
      nullable: true
      description: Represents a team. `null` if no team. `Team` in SourceMod and represented as an integer enum.
      enum:
        - team1
        - team2
        - spec
    Get5Side:
      type: string
      nullable: true
      description: Represents a side (CT vs T). `null` if no side. `Side` in SourceMod and represented as an integer enum.
      enum:
        - ct
        - t
        - spec
    Get5PauseType:
      type: string
      description: |
        Describes a pause type. `PauseType` in SourceMod and represented as an integer enum where 0 means no
        pause. The `backup` pause is a special pause type fired when the game is paused due to a round backup restore.
      enum:
        - tactical
        - technical
        - admin
        - backup
    Get5MatchPauseEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5MapTeamEvent"
        - type: object
          properties:
            pause_type:
              $ref: "#/components/schemas/Get5PauseType"
    Get5TeamWrapper:
      type: object
      description: Describes a team. `Team1` or `Team2` in SourceMod.
      properties:
        id:
          type: string
          description: User-supplied ID of the team, if one was provided. `GetId()` and `SetId()` in SourceMod. `null` in JSON and an empty string in SourceMod.
          example: "2843"
          nullable: true
        name:
          type: string
          description: The name of the team. `GetName()` and `SetName()` in SourceMod.
          example: Natus Vincere
    Get5StatsTeam:
      description: Describes a team with its score and player stats. `Team1` or `Team2` in SourceMod.
      allOf:
        - $ref: "#/components/schemas/Get5TeamWrapper"
        - type: object
          properties:
            series_score:
              type: integer
              minimum: 0
              description: The team's current series score, i.e. the number of maps they have won in the series. `SeriesScore` in SourceMod.
            score:
              type: integer
              minimum: 0
              description: The team's total score on the current map. `Score` in SourceMod.
              example: 14
            score_ct:
              type: integer
              minimum: 0
              description: The team's score on the CT side on the current map. `ScoreCT` in SourceMod.
              example: 10
            score_t:
              type: integer
              minimum: 0
              description: The team's score on the T side on the current map. `ScoreT` in SourceMod.
              example: 14
            players:
              type: array
              description: The players on the team. `Players` in SourceMod.
              items:
                $ref: "#/components/schemas/Get5StatsPlayer"
            side:
              title: Get5Side
              description: The current side of the team. `Side` in SourceMod.
              allOf:
                - $ref: "#/components/schemas/Get5Side"
            starting_side:
              title: Get5Side
              description: The starting side of the team. `StartingSide` in SourceMod.
              allOf:
                - $ref: "#/components/schemas/Get5Side"
    Get5PlayerBase:
      type: object
      properties:
        steamid:
          type: string
          example: '76561198279375306'
          description: |
            The SteamID64 of the player. `GetSteamId()` and `SetSteamId()`
            in SourceMod. This will be `BOT-%d` if the player is a bot, where `%d` is the user ID (`user_id`).
            The string will be empty for Console and GOTV.
        name:
          type: string
          description: |
            The in-game name of the player. If the player is a bot, this will be "BOT Gary" etc. If console, this value
            is `Console` and if GOTV, this value is `GOTV`. `GetName()` and `SetName()` in SourceMod.
          example: s1mple
    Get5StatsPlayer:
      allOf:
        - "$ref": "#/components/schemas/Get5PlayerBase"
        - type: object
          properties:
            stats:
              $ref: "#/components/schemas/Get5PlayerStats"
    Get5Player:
      allOf:
        - "$ref": "#/components/schemas/Get5PlayerBase"
        - type: object
          properties:
            user_id:
              type: integer
              minimum: 0
              description: |
                The in-game user ID of the player. This uniquely identifies the player within a server and is
                auto-incremented for each connecting player. 0 for Console but >0 for all players, bots or GOTV. If the same
                player reconnects, they will be given a new ID. `steamid` uniquely identifies the player outside the server.
              example: 4
            side:
              $ref: "#/components/schemas/Get5Side"
            is_bot:
              type: boolean
              description: Indicates if the player is a bot. `IsBot` in SourceMod.
              example: false
          description: Describes a player. `Player` in SourceMod (or `Attacker` on `Get5PlayerDeathEvent`).
    Get5Weapon:
      type: object
      properties:
        name:
          type: string
          example: ak47
          description: The in-game console name of the weapon used. `GetName()` and
            `SetName()` in SourceMod.
        id:
          type: integer
          minimum: 0
          example: 27
          description: The weapon ID used. See https://sm.alliedmods.net/new-api/cstrike/CSWeaponID
            `Id` in SourceMod. Some weapons are ID 0, such as the C4 bomb explosion or molotov/incendiary fire.
      description: Describes a weapon. `Weapon` in SourceMod.
    Get5AssisterObject:
      type: object
      nullable: true
      properties:
        player:
          "$ref": "#/components/schemas/Get5Player"
        friendly_fire:
          type: boolean
          description: Indicates if the assist was friendly fire. `FriendlyFire` in
            SourceMod.
        flash_assist:
          type: boolean
          description: Indicates if the assist was a flash assist. `FlashAssist` in
            SourceMod.
      description: |
        Describes an assist to a kill. `null` if no assister. `Assist`
        in SourceMod.
    Get5GrenadeVictim:
      type: object
      properties:
        player:
          "$ref": "#/components/schemas/Get5Player"
        friendly_fire:
          type: boolean
          description: Indicates if the grenade victim (`player`) was a friendly.
            `FriendlyFire` in SourceMod.
    Get5VictimGrenadeEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5PlayerWeaponEvent"
        - type: object
          properties:
            victims:
              type: array
              items:
                oneOf:
                  - "$ref": "#/components/schemas/Get5BlindedGrenadeVictim"
                  - "$ref": "#/components/schemas/Get5DamageGrenadeVictim"
              description: Describes the victims of the grenade. For flash bangs, these
                are `Get5BlindedGrenadeVictim` and for molotovs/firebombs and HE, these
                are `Get5DamageGrenadeVictim`. The array is empty if the grenade did not
                affect anyone. `Victims` in SourceMod.
    Get5VictimWithDamageGrenadeEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5VictimGrenadeEvent"
        - type: object
          properties:
            damage_enemies:
              type: integer
              minimum: 0
              description: The total damage the grenade did to enemies. `DamageEnemies`
                in SourceMod.
            damage_friendlies:
              type: integer
              minimum: 0
              description: The total damage the grenade did to friendlies. `DamageFriendlies`
                in SourceMod.
    Get5DamageGrenadeVictim:
      allOf:
        - "$ref": "#/components/schemas/Get5GrenadeVictim"
        - type: object
          properties:
            damage:
              type: integer
              maximum: 100
              minimum: 1
              description: The damage afflicted to the player by the grenade. `Damage`
                in SourceMod.
            killed:
              type: boolean
              description: Indicates if the grenade victim (`player`) was killed by the
                grenade. `Killed` in SourceMod.
          description: Describes a victim of a HE or molotov/firebomb.
    Get5BlindedGrenadeVictim:
      allOf:
        - "$ref": "#/components/schemas/Get5GrenadeVictim"
        - type: object
          properties:
            blind_duration:
              type: number
              maximum: 5
              minimum: 0.5
              description: The duration in seconds the victim (`player`) was blinded by
                the grenade. `BlindDuration` in SourceMod.
          description: Describes a victim of a flash bang.
    Get5Site:
      type: string
      enum:
        - a
        - b
      description: The site at which the bomb was planted/defused or exploded. `Site` in SourceMod.
    Get5PlayerDisconnectedEvent:
      allOf:
        - "$ref": "#/components/schemas/Get5MatchEvent"
        - type: object
          properties:
            player:
              $ref: "#/components/schemas/Get5Player"
    Get5PlayerStats:
      type: object
      description: The stats of the player.
      properties:
        kills:
          type: integer
          minimum: 0
          description: 'The number of kills the player had. `Kills` in SourceMod.'
          example: 34
        deaths:
          type: integer
          minimum: 0
          description: 'The number of deaths the player had. `Deaths` in SourceMod.'
          example: 8
        assists:
          type: integer
          minimum: 0
          description: 'The number of assists the player had. `Assists` in SourceMod.'
          example: 5
        flash_assists:
          type: integer
          minimum: 0
          description: 'The number of flashbang assists the player had. `FlashAssists` in SourceMod.'
          example: 3
        team_kills:
          type: integer
          minimum: 0
          description: 'The number of team-kills the player had. `TeamKills` in SourceMod.'
          example: 0
        suicides:
          type: integer
          minimum: 0
          description: 'The number of suicides the player had. `Suicides` in SourceMod.'
          example: 0
        damage:
          type: integer
          minimum: 0
          description: 'The total amount of damage the player dealt. `Damage` in SourceMod.'
          example: 2948
        utility_damage:
          type: integer
          minimum: 0
          description: 'The total amount of damage the player dealt via utility. `UtilityDamage` in SourceMod.'
          example: 173
        enemies_flashed:
          type: integer
          minimum: 0
          description: 'The number of enemies flashed by the player. `EnemiesFlashed` in SourceMod.'
          example: 6
        friendlies_flashed:
          type: integer
          minimum: 0
          description: 'The number of teammates flashed by the player. `FriendliesFlashed` in SourceMod.'
          example: 2
        knife_kills:
          type: integer
          minimum: 0
          description: 'The number kills the player had with a knife. `KnifeKills` in SourceMod.'
          example: 1
        headshot_kills:
          type: integer
          minimum: 0
          description: 'The number kills the player had that were headshots. `HeadshotKills` in SourceMod.'
          example: 19
        rounds_played:
          type: integer
          minimum: 0
          description: 'The number of rounds the player started. `RoundsPlayed` in SourceMod.'
          example: 27
        bomb_defuses:
          type: integer
          minimum: 0
          description: 'The number of times the player defused the bomb. `BombDefuses` in SourceMod.'
          example: 4
        bomb_plants:
          type: integer
          minimum: 0
          description: 'The number of times the player planted the bomb. `BombPlants` in SourceMod.'
          example: 3
        1k:
          type: integer
          minimum: 0
          description: 'The number of rounds where the player killed 1 opponent. `Kills1` in SourceMod.'
          example: 3
        2k:
          type: integer
          minimum: 0
          description: 'The number of rounds where the player killed 2 opponents. `Kills2` in SourceMod.'
          example: 2
        3k:
          type: integer
          minimum: 0
          description: 'The number of rounds where the player killed 3 opponents. `Kills3` in SourceMod.'
          example: 3
        4k:
          type: integer
          minimum: 0
          description: 'The number of rounds where the player killed 4 opponents. `Kills4` in SourceMod.'
          example: 0
        5k:
          type: integer
          minimum: 0
          description: 'The number of rounds where the player killed 5 opponents. `Kills5` in SourceMod.'
          example: 1
        1v1:
          type: integer
          minimum: 0
          description: 'The number of 1v1s the player won. `OneV1s` in SourceMod.'
          example: 1
        1v2:
          type: integer
          minimum: 0
          description: 'The number of 1v2s the player won. `OneV2s` in SourceMod.'
          example: 3
        1v3:
          type: integer
          minimum: 0
          description: 'The number of 1v3s the player won. `OneV3s` in SourceMod.'
          example: 2
        1v4:
          type: integer
          minimum: 0
          description: 'The number of 1v4s the player won. `OneV4s` in SourceMod.'
          example: 0
        1v5:
          type: integer
          minimum: 0
          description: 'The number of 1v5s the player won. `OneV5s` in SourceMod.'
          example: 1
        first_kills_t:
          type: integer
          minimum: 0
          description: 'The number of rounds where the player had the first kill in the round while playing the T side. `FirstKillsT` in SourceMod.'
          example: 6
        first_kills_ct:
          type: integer
          minimum: 0
          description: 'The number of rounds where the player had the first kill in the round while playing the CT side. `FirstKillsCT` in SourceMod.'
          example: 5
        first_deaths_t:
          type: integer
          minimum: 0
          description: 'The number of rounds where the player was the first to die in the round while playing the T side. `FirstDeathsT` in SourceMod.'
          example: 1
        first_deaths_ct:
          type: integer
          minimum: 0
          description: 'The number of rounds where the player was the first to die in the round while playing the CT side. `FirstDeathsCT` in SourceMod.'
          example: 1
        trade_kills:
          type: integer
          minimum: 0
          description: 'The number of times the player got a kill in a trade. `TradeKills` in SourceMod.'
          example: 3
        kast:
          type: integer
          minimum: 0
          description: 'The number of rounds where the player (k)illed a player, had an (a)ssist, (s)urvived or was (t)raded. `KAST` in SourceMod.'
          example: 23
        score:
          type: integer
          minimum: 0
          description: 'The in-game "score" of the player. `Score` in SourceMod.'
          example: 45
        mvp:
          type: integer
          minimum: 0
          description: 'The number of times the player was elected the round MVP. `MVPs` in SourceMod.'
          example: 4
tags:
  - name: All Events
    description: Forward fired for all events.
  - name: Series Flow
    description: Events that occur in relation to setting up a match or series.
  - name: Map Flow
    description: Events that occur in relation to a map pick or match-events on a map.
  - name: Live
    description: Events that only occur during live rounds (not during knife, veto or warmup).
  - name: Client Actions
    description: Events that occur based on players' chat or connection activity.
